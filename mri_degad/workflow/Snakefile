import snakebids
from snakebids import bids, generate_inputs, get_wildcard_constraints
from appdirs import AppDirs


configfile: "/config/snakebids.yml"


# Get input wildcards
inputs = generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybidsdb_dir=config.get("pybidsdb_dir"),
    pybidsdb_reset=config.get("pybidsdb_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
)


# this adds constraints to the bids naming
wildcard_constraints:
    **get_wildcard_constraints(config["pybids_inputs"]),


# ----
wildcard_constraints:
    desc="[a-zA-Z0-9]+",
    space="[a-zA-Z0-9]+",
    hemi="[a-zA-Z0-9]+",
    surfname="[a-zA-Z0-9]+",
    modality="[a-zA-Z0-9]+",
    density="[a-zA-Z0-9]+",
    atlas="[a-zA-Z0-9]+",
    autotop="[a-zA-Z0-9]+",
    template="[a-zA-Z0-9]+",


root = os.path.expandvars(config["root"])
work = os.path.expandvars(config["workdir"])


def get_download_dir():
    if "MRI_DEGAD_CACHE_DIR" in os.environ.keys():
        download_dir = os.environ["MRI_DEGAD_CACHE_DIR"]
    else:
        # create local download dir if it doesn't exist
        dirs = AppDirs("mri_degad", "jclauneurolab")
        download_dir = dirs.user_cache_dir
    return download_dir


download_dir = get_download_dir()


include: "rules/preprocessing.smk"
include: "rules/cnn.smk"
include: "rules/postprocessing.smk"
include: "rules/qc.smk"
include: "rules/analysis.smk"


def get_final_output():
    final = []
    final.extend(
        inputs["t1w"].expand(
            bids(
                root=work,
                datatype="vasc_mask",
                suffix="mask.nii.gz",
                **{k: v for k, v in inputs["t1w"].wildcards.items() if k != "acq"},
            )
        )
    ),
    final.extend(
        inputs["t1w"].expand(
            bids(
                root=work,
                datatype="qc",
                suffix="qc.html",
                **{k: v for k, v in inputs["t1w"].wildcards.items() if k != "acq"},
            )
        ),
    )
    if config["skull_strip"]:
        final.extend(
            inputs["t1w"].expand(
                bids(
                    root=work,
                    datatype="vasc_mask",
                    suffix="mask_skull_stripped.nii.gz",
                    **{k: v for k, v in inputs["t1w"].wildcards.items() if k != "acq"},
                )
            ),
        ),
        final.extend(
            inputs["t1w"].expand(
                bids(
                    root=work,
                    datatype="qc",
                    suffix="qc_skull_stripped.html",
                    **{k: v for k, v in inputs["t1w"].wildcards.items() if k != "acq"},
                )
            ),
        )
    if config["analysis"]:
        final.extend(
                inputs["t1w"].expand(bids(
                root=work,
                datatype="analysis",
                suffix="metrics.txt",
                **{k: v for k, v in inputs["t1w"].wildcards.items() if k != "acq"}
            ))
        ),
        final.extend(
                inputs["t1w"].expand(bids(
                root=work,
                datatype="analysis",
                suffix="metrics_skull_stripped.txt",
                **{k: v for k, v in inputs["t1w"].wildcards.items() if k != "acq"}
            ))
        ),
        final.extend(
                inputs["t1w"].expand(bids(
                root=work,
                datatype="qc",
                suffix="qc_nongad_to_degad.html",
                **{k: v for k, v in inputs["t1w"].wildcards.items() if k != "acq"}
            ))
        ),
        final.extend(
                inputs["t1w"].expand(bids(
                root=work,
                datatype="qc",
                suffix="qc_nongad_to_degad_skull_stripped.html",
                **{k: v for k, v in inputs["t1w"].wildcards.items() if k != "acq"}
            ))
        ),
        final.extend(
                inputs["t1w"].expand(bids(
                root=work,
                datatype="figures",
                suffix="whole_compare.png",
                **{k: v for k, v in inputs["t1w"].wildcards.items() if k != "acq"},
            ))
        )
    return final


rule all:
    input:
        get_final_output(),

